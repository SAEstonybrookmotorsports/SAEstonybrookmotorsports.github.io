---
import BaseLayout from '../layouts/BaseLayout.astro';
import { teamData, type TeamMember } from '../lib/teamData';
import '../styles/global.css';
import '../styles/theme.css';
import '../styles/team.css';
import linkedinIcon from '../assets/linkedin.svg';
import heroPlaceholder from '../assets/hero.jpg';
import MemberCard from '../components/MemberCard.astro';


// 1️⃣ fallback for missing images
const mappedTeamData = teamData.map(m => ({ ...m, image: m.image ?? heroPlaceholder }));

// 2️⃣ Separate members by category
const faculty = mappedTeamData.filter(m => m.category === 'Faculty');
const eboard = mappedTeamData.filter(m => m.category === 'Eboard');
const systemLeads = mappedTeamData.filter(m => m.category === 'SystemLead');
const grads = mappedTeamData.filter(m => m.category === 'Grad');
const members = mappedTeamData.filter(m => m.category === 'Member');

// 3️⃣ Group Member category by subsystem
const subsystems: Record<string, TeamMember[]> = {};
members.forEach(m => (subsystems[m.system] ||= []).push(m));

// 4️⃣ Define subsystem display order
const subsystemOrder = [
  'Powertrain','Chassis','Electrical','Software', 'Vehicle Dynamics',
  'Testing'
];
---

<BaseLayout pageClass="team">

  <!-- Hero -->
  <section class="hero" style="--hero-img: url('/images/team-hero.jpg')">
    <div class="hero-content">
      <h1 class="hero-title">Meet the Team</h1>
      <p class="hero-sub">The people behind the machine</p>
    </div>
  </section>

  <!-- Eboard -->
  {eboard.length > 0 && (
    <section class="section fade-in">
      <h2 class="section-heading">Eboard</h2>
      <div class="members-grid equal-size">
        {eboard.map(m => <MemberCard member={m} />)}
      </div>
    </section>
  )}
<!-- Faculty -->
  {faculty.length > 0 && (
    <section class="section fade-in">
      <h2 class="section-heading">Faculty Advisors</h2>
      <div class="members-grid equal-size">
        {faculty.map(m => <MemberCard member={m} />)}
      </div>
    </section>
  )}
  <!-- System Leads -->
  {systemLeads.length > 0 && (
    <section class="section fade-in">
      <h2 class="section-heading">System Leads</h2>
      <div class="members-grid equal-size">
        {systemLeads.map(m => <MemberCard member={m} />)}
      </div>
    </section>
  )}

  <!-- Graduate Members -->
  {grads.length > 0 && (
    <section class="section fade-in">
      <h2 class="section-heading">Graduate Members</h2>
      <div class="members-grid equal-size">
        {grads.map(m => <MemberCard member={m} />)}
      </div>
    </section>
  )}

  <!-- Subsystems -->
  {subsystemOrder.map(sys => {
    const mems = subsystems[sys];
    if (!mems) return null;
    return (
      <section class="section fade-in" id={sys.toLowerCase()}>
        <h2 class="section-heading">{sys}</h2>
        <div class="members-grid equal-size">
          {mems.map(m => <MemberCard member={m} />)}
        </div>
      </section>
    );
  })}

  <!-- Intersection observer & fun bio -->
  <script type="module">
    document.addEventListener("DOMContentLoaded", () => {
      // Page wrapper safe fade-in
      const wrapper = document.getElementById("fade-wrapper");
      if (wrapper) {
        // Use distinct class so it doesn't clash with section .fade-in
        wrapper.classList.add("page-enter");
        // Add visible on next paint so transition runs
        requestAnimationFrame(() => {
          // allow one more frame for layout, then show
          requestAnimationFrame(() => wrapper.classList.add("visible"));
        });
      }
  
      // --- Section fade-in intersection observer (unchanged) ---
      const io = new IntersectionObserver(entries => {
        entries.forEach(e => {
          if (e.isIntersecting) {
            e.target.classList.add('visible');
            io.unobserve(e.target);
          }
        });
      }, { threshold: 0.2 });
      document.querySelectorAll('.fade-in').forEach(el => io.observe(el));
  
      // --- Link transition: fade out page before navigating ---
      const links = document.querySelectorAll("a[href]");
      links.forEach((link) => {
        const href = link.getAttribute("href");
        // skip hash links, external, target=_blank
        if (!href || href.startsWith("#") || link.target === "_blank") return;
        link.addEventListener("click", (e) => {
          if (e.metaKey || e.ctrlKey || e.shiftKey || e.altKey) return; // preserve modifier navigation
          e.preventDefault();
          if (!wrapper) return window.location.href = href;
          // trigger exit animation
          wrapper.classList.remove("visible");
          wrapper.classList.add("page-exit");
          // wait for animation, then navigate
          setTimeout(() => (window.location.href = href), 300);
        });
      });
  
      // --- Fun-bio click handler (unchanged) ---
      document.querySelectorAll('.bio').forEach(el => {
        el.addEventListener('click', () => {
          const clicks = (+el.dataset.clicks || 0) + 1;
          el.dataset.clicks = String(clicks);
          if (clicks === 5) {
            const fun = el.dataset.funbio;
            if (fun) el.textContent = fun;
          }
        });
      });
    });
  </script>
</BaseLayout>

---

