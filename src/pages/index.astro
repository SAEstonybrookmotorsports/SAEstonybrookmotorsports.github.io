---
import LogoAnimation from "../components/LogoAnimation.astro";
import BaseLayout from "../layouts/BaseLayout.astro";
import { sponsors, tierDescriptions } from "../lib/sponsors.ts";

const tiers = ["Gold", "Silver", "Bronze", "Honorable Mentions"];
---

<LogoAnimation />


<BaseLayout>
  <!-- HERO -->
  <header class="hero">
    <div class="hero-content">
      <h1 class="hero-title">Stony Brook Motorsports</h1>
      <p class="hero-sub">A Racing Team with History</p>
      <a href="/past-cars" class="btn-cta">
        See how we placed at Baja 2025
        <span class="arrow-circle"></span>
      </a>
    </div>
  </header>

  <!-- STATS BAR -->
  <section class="stat-bar">
    <div class="stat-item" data-target="75">
      <h3>0</h3><p>Active Members</p>
    </div>
    <div class="stat-item" data-target="35">
      <h3>0</h3><p>Competitions</p>
    </div>
    <div class="stat-item" data-target="120">
      <h3>0</h3><p>Projects</p>
    </div>
  </section>

  <!-- ABOUT THE TEAM -->
  <section class="about">
    <h2>Get to Know Us</h2>
    <p>
      We're a multidisciplinary student team passionate about building off-road race cars from scratch.<br>
      We push the limits of engineering and teamwork  all while forging lifelong friendships.
    </p>
  </section>

  <!-- SPONSORS SECTION -->
  <section id="sponsors" class="sponsors">
    <h3>Our Sponsors</h3>
    {tiers.map(tier => {
      const tierSponsors = sponsors.filter(s => s.tier === tier);
      if (!tierSponsors.length) return null;
      return (
        <div class={`sponsor-tier ${tier.toLowerCase().replace(/ /g, '-')}`}> 
          <h4>{tier}</h4>
          {tierDescriptions[tier] && <p>{tierDescriptions[tier]}</p>}
          <div class={`sponsor-grid ${tier === 'Honorable Mentions' ? 'honorable-grid' : ''}`}>
            {tierSponsors.map(({ name, image, alt, url, personName }) => (
              <div class="logo-box">
                {url ? (
                  <a href={url} target="_blank" rel="noopener">
                    <img src={image} alt={alt} />
                  </a>
                ) : (
                  <img src={image} alt={alt} />
                )}
                {tier === 'Honorable Mentions' && (
                  <p>{personName ?? name}</p>
                )}
              </div>
            ))}
          </div>
        </div>
      );
    })}
  </section>

  <!-- JS: ANIMATION + STATS -->
  <script type="module">
    window.addEventListener('DOMContentLoaded', () => {
      const overlay = document.getElementById('animation-overlay');
      const logo = document.getElementById('navbar-logo');
      const played = sessionStorage.getItem('animationPlayed');
      if (overlay && !played) {
        overlay.style.pointerEvents = 'none';
        setTimeout(() => {
          overlay.remove();
          logo.style.opacity = '1';
          sessionStorage.setItem('animationPlayed','true');
        }, 4000);
      } else overlay?.remove();

      const stats = document.querySelectorAll('.stat-item');
      const animate = () => {
        stats.forEach((el) => {
          const rect = el.getBoundingClientRect();
          if (rect.top < window.innerHeight && !el.classList.contains('done')) {
            const target = +el.dataset.target;
            let count = 0;
            const h3 = el.querySelector('h3');
            const step = Math.ceil(target / 50);
            const timer = setInterval(() => {
              count += step;
              if (count >= target) {
                count = target;
                clearInterval(timer);
                el.classList.add('done');
              }
              if (h3) h3.textContent = count + (el.classList.contains('done') ? '+' : '');
            }, 20);
          }
        });
      };
      window.addEventListener('scroll', animate);
      animate();

      const sp = document.getElementById('sponsors');
      const logos = document.querySelector('.sponsor-logos');
      window.addEventListener('scroll', () => {
        if (sp.getBoundingClientRect().top < window.innerHeight / 2) {
          logos?.classList.add('fade-to-white');
        }
      });
    });
  </script>

  <script type="module">
    document.addEventListener('DOMContentLoaded', () => {
      const boxes = document.querySelectorAll('.logo-box');
      const io = new IntersectionObserver((entries) => {
        entries.forEach(e => {
          if (e.isIntersecting) {
            e.target.classList.add('reveal');
            io.unobserve(e.target);
          }
        });
      }, { threshold: 0.3 });

      boxes.forEach(b => io.observe(b));
    });
  </script>
</BaseLayout>